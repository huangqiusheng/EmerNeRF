I20231215 20:17:54 root train_emernerf.py:167] config_file: configs/default_dynamic.yaml
enable_wandb: False
entity: YOUR ENTITY NAME
eval_only: False
opts: ['data.scene_idx=700', 'data.start_timestep=0', 'data.end_timestep=190', 'logging.saveckpt_freq=25000', 'optim.num_iters=25000']
output_root: ./delete/1215
project: scene_reconstruction
render_data_video: False
render_data_video_only: False
render_video_postfix: None
run_name: 700_flow
visualize_voxel: False
I20231215 20:17:54 root train_emernerf.py:171] Config:
data:
  data_root: data/waymo/processed/training
  dataset: waymo
  scene_idx: 700
  start_timestep: 0
  end_timestep: 190
  ray_batch_size: 8192
  preload_device: cuda
  pixel_source:
    load_size:
    - 640
    - 960
    downscale: 1
    num_cams: 5
    test_image_stride: 0
    load_rgb: true
    load_semantic: true
    load_sky_mask: true
    load_dynamic_mask: true
    load_features: false
    skip_feature_extraction: false
    target_feature_dim: 64
    feature_model_type: dinov2_vitb14
    feature_extraction_stride: 7
    feature_extraction_size:
    - 644
    - 966
    delete_features_after_run: false
    sampler:
      buffer_downscale: 16
      buffer_ratio: 0.25
  lidar_source:
    load_lidar: false
    only_use_top_lidar: false
    truncated_max_range: 80
    truncated_min_range: -2
    lidar_downsample_factor: 4
    lidar_percentile: 0.02
  occ_source:
    voxel_size: 0.1
nerf:
  aabb:
  - -20.0
  - -40.0
  - 0
  - 80.0
  - 40.0
  - 20.0
  unbounded: true
  propnet:
    num_samples_per_prop:
    - 128
    - 64
    near_plane: 0.1
    far_plane: 1000.0
    sampling_type: uniform_lindisp
    enable_anti_aliasing_level_loss: true
    anti_aliasing_pulse_width:
    - 0.03
    - 0.003
    xyz_encoder:
      type: HashEncoder
      n_input_dims: 3
      n_levels_per_prop:
      - 8
      - 8
      base_resolutions_per_prop:
      - 16
      - 16
      max_resolution_per_prop:
      - 512
      - 2048
      lgo2_hashmap_size_per_prop:
      - 20
      - 20
      n_features_per_level: 1
    unbounded: true
  sampling:
    num_samples: 64
  model:
    xyz_encoder:
      type: HashEncoder
      n_input_dims: 3
      n_levels: 10
      n_features_per_level: 4
      base_resolution: 16
      max_resolution: 8192
      log2_hashmap_size: 20
    dynamic_xyz_encoder:
      type: HashEncoder
      n_input_dims: 4
      n_levels: 10
      n_features_per_level: 4
      base_resolution: 32
      max_resolution: 8192
      log2_hashmap_size: 18
    neck:
      base_mlp_layer_width: 64
      geometry_feature_dim: 64
      semantic_feature_dim: 64
    head:
      head_mlp_layer_width: 64
      enable_cam_embedding: false
      enable_img_embedding: true
      appearance_embedding_dim: 16
      enable_sky_head: true
      enable_feature_head: false
      feature_embedding_dim: 64
      feature_mlp_layer_width: 64
      enable_learnable_pe: true
      enable_dynamic_branch: true
      enable_shadow_head: true
      interpolate_xyz_encoding: true
      enable_temporal_interpolation: false
      enable_flow_branch: false
      enable_semantic_head: true
      use_regress_method: true
      instance_class: 150
      camera_head: 1
    num_cams: 5
    unbounded: true
    resume_from: null
render:
  render_chunk_size: 16384
  render_novel_trajectory: false
  fps: 24
  render_low_res: true
  render_full: true
  render_test: true
  low_res_downscale: 4
  save_html: false
  vis_voxel_size: 0.3
supervision:
  rgb:
    loss_type: l2
    loss_coef: 1.0
  depth:
    loss_type: l2
    enable: true
    loss_coef: 1.0
    depth_error_percentile: null
    line_of_sight:
      enable: true
      loss_type: my
      loss_coef: 0.1
      start_iter: 2000
      start_epsilon: 6.0
      end_epsilon: 2.5
      decay_steps: 5000
      decay_rate: 0.5
  sky:
    loss_type: opacity_based
    loss_coef: 0.001
  semantic:
    loss_type: l2
    loss_coef: 0.1
  feature:
    loss_type: l2
    loss_coef: 0.5
  dynamic:
    loss_type: sparsity
    loss_coef: 0.01
    entropy_loss_skewness: 1.1
  shadow:
    loss_type: sparsity
    loss_coef: 0.01
optim:
  num_iters: 25000
  weight_decay: 1.0e-05
  lr: 0.01
  seed: 0
  check_nan: false
  cache_rgb_freq: 2000
logging:
  vis_freq: 2000
  print_freq: 200
  saveckpt_freq: 25000
  save_seperate_video: true
resume_from: null
eval:
  eval_lidar_flow: false
  remove_ground_when_eval_lidar_flow: true
  eval_occ: false
  occ_annotation_stride: 10
log_dir: ./delete/1215/scene_reconstruction/700_flow

I20231215 20:17:54 root train_emernerf.py:181] Full config saved to ./delete/1215/scene_reconstruction/700_flow/config.yaml, and ./delete/1215/scene_reconstruction/700_flow/configs_bk/config_2023-12-15_20-17-54.yaml
I20231215 20:18:56 root pixel_source.py:535] Successfully built pixel error buffer (log2(num_pixels) = 21.13).
I20231215 20:18:56 root pixel_source.py:185] [Pixel] All Pixel Data loaded.
I20231215 20:18:59 root pixel_source.py:453] [Pixel] Computing auto AABB based on front camera trajectory....
I20231215 20:18:59 root pixel_source.py:486] [Pixel] Auto AABB from camera: tensor([-38.4616, -40.8799,  -2.9896, 161.4537,  40.5111,  20.0000])
I20231215 20:18:59 root waymo.py:533] Train timesteps: 
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190]
I20231215 20:18:59 root waymo.py:536] Test timesteps: 
[]
I20231215 20:18:59 root waymo.py:549] Number of train indices: 955
I20231215 20:18:59 root waymo.py:550] Train indices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954]
I20231215 20:18:59 root waymo.py:551] Number of test indices: 0
I20231215 20:18:59 root waymo.py:552] Test indices: []
I20231215 20:18:59 root encodings.py:149] TCNN encoding config: 
 {"otype": "HashGrid", "n_levels": 8, "n_features_per_level": 1, "log2_hashmap_size": 20, "base_resolution": 16, "per_level_scale": 1.640670712015276, "interpolation": "linear"}
I20231215 20:18:59 root encodings.py:150] TCNN encoding number of params: 4.661184M 
dtype: torch.float32 

I20231215 20:18:59 root encodings.py:149] TCNN encoding config: 
 {"otype": "HashGrid", "n_levels": 8, "n_features_per_level": 1, "log2_hashmap_size": 20, "base_resolution": 16, "per_level_scale": 2.0, "interpolation": "linear"}
I20231215 20:18:59 root encodings.py:150] TCNN encoding number of params: 5.541888M 
dtype: torch.float32 

I20231215 20:18:59 root radiance_field.py:916] Set propnet aabb from tensor([[-1., -1., -1.,  1.,  1.,  1.]], device='cuda:0') to tensor([-38.4616, -40.8799,  -2.9896, 161.4537,  40.5111,  20.0000])
I20231215 20:18:59 root radiance_field.py:916] Set propnet aabb from tensor([[-1., -1., -1.,  1.,  1.,  1.]], device='cuda:0') to tensor([-38.4616, -40.8799,  -2.9896, 161.4537,  40.5111,  20.0000])
I20231215 20:18:59 root nerfacc_prop_net.py:87] Enable anti-aliasing loss, pulse width: [0.03, 0.003]
I20231215 20:18:59 root encodings.py:149] TCNN encoding config: 
 {"otype": "HashGrid", "n_levels": 10, "n_features_per_level": 4, "log2_hashmap_size": 20, "base_resolution": 16, "per_level_scale": 1.9999999999999998, "interpolation": "linear"}
I20231215 20:18:59 root encodings.py:150] TCNN encoding number of params: 30.55616M 
dtype: torch.float32 

I20231215 20:18:59 root encodings.py:149] TCNN encoding config: 
 {"otype": "HashGrid", "n_levels": 10, "n_features_per_level": 4, "log2_hashmap_size": 18, "base_resolution": 32, "per_level_scale": 1.8517494245745807, "interpolation": "linear"}
I20231215 20:18:59 root encodings.py:150] TCNN encoding number of params: 10.48576M 
dtype: torch.float32 

I20231215 20:18:59 root radiance_field.py:289] Set aabb from tensor([-1., -1., -1.,  1.,  1.,  1.]) to tensor([-38.4616, -40.8799,  -2.9896, 161.4537,  40.5111,  20.0000])
I20231215 20:18:59 root train_emernerf.py:470] PropNetEstimator: [DensityField(
  (xyz_encoder): HashEncoder(
    (tcnn_encoding): Encoding(n_input_dims=3, n_output_dims=8, seed=1337, dtype=torch.float32, hyperparams={'base_resolution': 16, 'hash': 'CoherentPrime', 'interpolation': 'Linear', 'log2_hashmap_size': 20, 'n_features_per_level': 1, 'n_levels': 8, 'otype': 'Grid', 'per_level_scale': 1.640670657157898, 'type': 'Hash'})
  )
  (base_mlp): Sequential(
    (0): Linear(in_features=8, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
), DensityField(
  (xyz_encoder): HashEncoder(
    (tcnn_encoding): Encoding(n_input_dims=3, n_output_dims=8, seed=1337, dtype=torch.float32, hyperparams={'base_resolution': 16, 'hash': 'CoherentPrime', 'interpolation': 'Linear', 'log2_hashmap_size': 20, 'n_features_per_level': 1, 'n_levels': 8, 'otype': 'Grid', 'per_level_scale': 2.0, 'type': 'Hash'})
  )
  (base_mlp): Sequential(
    (0): Linear(in_features=8, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)]
I20231215 20:18:59 root train_emernerf.py:471] Model: RadianceField(
  (xyz_encoder): HashEncoder(
    (tcnn_encoding): Encoding(n_input_dims=3, n_output_dims=40, seed=1337, dtype=torch.float32, hyperparams={'base_resolution': 16, 'hash': 'CoherentPrime', 'interpolation': 'Linear', 'log2_hashmap_size': 20, 'n_features_per_level': 4, 'n_levels': 10, 'otype': 'Grid', 'per_level_scale': 2.0, 'type': 'Hash'})
  )
  (base_mlp): Sequential(
    (0): Linear(in_features=40, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
  )
  (dynamic_xyz_encoder): HashEncoder(
    (tcnn_encoding): Encoding(n_input_dims=4, n_output_dims=40, seed=1337, dtype=torch.float32, hyperparams={'base_resolution': 32, 'hash': 'CoherentPrime', 'interpolation': 'Linear', 'log2_hashmap_size': 18, 'n_features_per_level': 4, 'n_levels': 10, 'otype': 'Grid', 'per_level_scale': 1.8517494201660156, 'type': 'Hash'})
  )
  (dynamic_base_mlp): Sequential(
    (0): Linear(in_features=40, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
  )
  (appearance_embedding): Embedding(955, 16)
  (direction_encoding): SinusoidalEncoder()
  (rgb_head): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=113, out_features=64, bias=True)
      (1): Linear(in_features=177, out_features=64, bias=True)
      (2): Linear(in_features=64, out_features=3, bias=True)
    )
  )
  (shadow_head): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=1, bias=True)
    (3): Sigmoid()
  )
  (sky_head): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=49, out_features=64, bias=True)
      (1): Linear(in_features=113, out_features=64, bias=True)
      (2): Linear(in_features=64, out_features=3, bias=True)
    )
  )
  (semantic_head): ModuleList(
    (0-149): 150 x MLP(
      (layers): ModuleList(
        (0): Linear(in_features=64, out_features=1, bias=True)
      )
    )
  )
)
I20231215 20:18:59 root train_emernerf.py:492] Will start training for 25000 iterations from scratch
